# -----------------------------------------------------------------------
# -------------------------TASK DESCRIPTION------------------------------
# -----------------------------------------------------------------------
'''
Необхідно створити функцію generator_numbers, яка буде аналізувати текст, 
ідентифікувати всі дійсні числа, що вважаються частинами доходів, і повертати їх як генератор. 
Дійсні числа у тексті записані без помилок, чітко відокремлені пробілами з обох боків. 
Також потрібно реалізувати функцію sum_profit, яка буде використовувати generator_numbers 
для підсумовування цих чисел і обчислення загального прибутку.

Вимоги до завдання:

Функція generator_numbers(text: str) повинна приймати рядок як аргумент і повертати генератор, 
що ітерує по всіх дійсних числах у тексті. Дійсні числа у тексті вважаються записаними без помилок 
і чітко відокремлені пробілами з обох боків.

Функція sum_profit(text: str, func: Callable) має використовувати генератор generator_numbers 
для обчислення загальної суми чисел у вхідному рядку та приймати його як аргумент при виклику.
'''


# -----------------------------------------------------------------------
# -------------------------TASK SOLUTION---------------------------------
# -----------------------------------------------------------------------

'''
Для виконання завдання розрбимо функцію, яка повертає генератор, якій буде сканувати текст 
та повертати знайдене число. Для пошуку чисел будемо використовувати регулярні вирази
Для сумування створимо функцію, де будемо використовувати цикл або list comprehenson

'''
# for correct typing
from typing import Callable
from collections.abc import Generator, Iterator
import re

# re pattern
pattern = re.compile(r"(?:^|(?<=\s))\d+\.\d{2}(?:$|(?=\s))")

def generator_numbers(data_string: str) -> Generator[float, None, None]:
    position = 0
    while True:
        match_group = pattern.search(data_string, position)
        if not match_group:
            break
        yield float(match_group.group(0))
        position = match_group.end()

def sum_profit(data_string: str, gen_numbers: Callable[[str], Iterator[float]]) -> float:
    return sum(gen_numbers(data_string))

if __name__ == "__main__":
    text = "Загальний дохід працівника складається з декількох частин: 1000.01 як основний дохід, доповнений додатковими надходженнями 27.45 і 324.00 доларів."
    total_income = sum_profit(text, generator_numbers)
    print(f"Загальний дохід: {total_income}")