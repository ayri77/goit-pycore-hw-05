# -----------------------------------------------------------------------
# -------------------------TASK DESCRIPTION------------------------------
# -----------------------------------------------------------------------
'''
Ряд Фібоначчі - це послідовність чисел виду: 0, 1, 1, 2, 3, 5, 8, ..., де кожне наступне число послідовності виходить додаванням двох попередніх членів ряду.

У загальному вигляді для обчислення n-го члена ряду Фібоначчі потрібно вирахувати вираз: 
F(n) = F(n-1) + F(n-2)

Це завдання можна вирішити рекурсивно, викликаючи функцію, що обчислює числа послідовності доти, доки виклик не сягне членів ряду менше n = 1, де послідовність задана.


Вимоги до завдання:

Функція caching_fibonacci() повинна повертати внутрішню функцію fibonacci(n).
fibonacci(n) обчислює n-те число Фібоначчі. Якщо число вже знаходиться у кеші, функція має повертати значення з кешу.
Якщо число не знаходиться у кеші, функція має обчислити його, зберегти у кеш та повернути результат.
Використання рекурсії для обчислення чисел Фібоначчі.
'''


# -----------------------------------------------------------------------
# -------------------------TASK SOLUTION---------------------------------
# -----------------------------------------------------------------------

'''
Для виконання завдання будемо використовувати можливість "замикання" функції
Попередньо план:
Функція, яка кеширує вже прораховані числа Фібоначчі, і повертає одразу, якщо є в кеші
Якщо немає, використовує рекурсію для розрахунку нового числа Фібоначчі. Проміжні значення також повинні кешируватись

'''

from typing import Callable

def caching_fibonacci() -> Callable[[int], int]:
    '''
    calculating Fibonacci number using cache to re-use already 
    Args:
        n: int
    Return:
        fibonacci: function
    '''
    # cache Fibonacci
    cache: dict[int, int] = {}
    
    def fibonacci(n: int) -> int:
        
        if not isinstance(n, int) or n < 0:
            return 0
        if n in cache:
            return cache[n]
        else:
            if n == 0:
                return 0
            elif n == 1:
                return 1
            else:
                cache[n] = fibonacci(n-1) + fibonacci(n-2)
                return cache[n]

    fibonacci._cache = cache # for testing purpose
    return fibonacci

if __name__ == "__main__":
    fib = caching_fibonacci()

    print(fib(10))